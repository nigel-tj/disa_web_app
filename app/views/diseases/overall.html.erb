<%- model_class = Disease -%>
<div class="page-header">
  <h1><%= @disease.name %> Overview</h1>
</div>

<dl class="dl-horizontal">
  <dt><strong><%= model_class.human_attribute_name(:name) %>:</strong></dt>
  <dd><%= @disease.name %></dd>
  <dt><strong><%= model_class.human_attribute_name(:disease_type) %>:</strong></dt>
  <dd><%= @disease.disease_type %></dd>
  <dt><strong><%= model_class.human_attribute_name(:disease_category) %>:</strong></dt>
  <dd><%= @disease.disease_category %></dd>
</dl>

<%= link_to t('.back', :default => t("helpers.links.back")),
diseases_path, :class => 'btn btn-default'  %>
<%= link_to t('.edit', :default => t("helpers.links.edit")),
edit_disease_path(@disease), :class => 'btn btn-default' %>
<%= link_to t('.destroy', :default => t("helpers.links.destroy")),
disease_path(@disease),
:method => 'delete',
:data => { :confirm => t('.confirm', :default => t("helpers.links.confirm", :default => 'Are you sure?')) },
:class => 'btn btn-danger' %>

<div class="col-md-12">
  <canvas id="myChart" width="400" height="400"></canvas>
</div>
<div class="row">
  <div class="col-md-6" id="map_wrapper">
    <div id="map_canvas" class="mapping"></div>
  </div>
  <div class="col-md-6">
    <table class="table table-bordered">
      <thead class="thead-inverse">
	<tr class="info">
	  <th>Age (years)</th>
	  <th>Male</th>
	  <th>Female</th>
	  <th>Total</th>
	</tr>
      </thead>
      <tbody>
	<tr>
	  <th scope="row">0-2</th>
	  <td><%= @male_0_to_2.size %></td>
	  <td><%= @female_0_to_2.size %></td>
	  <td>-</td>
	</tr>
	<tr>
	  <th scope="row">2-5</th>
	  <td><%= @male_2_to_5.size %></td>
	  <td><%= @female_2_to_5.size %></td>
	  <td>-</td>
	</tr>
	<tr>
	  <th scope="row">5-9</th>
	  <td><%= @male_5_to_9.size %></td>
	  <td><%= @female_5_to_9.size %></td>
	  <td>-</td>
	</tr>
	<tr>
	  <th scope="row">9-12</th>
	  <td><%= @male_9_to_12.size %></td>
	  <td><%= @female_9_to_12.size %></td>
	  <td>-</td>
	</tr>
	<tr>
	  <th scope="row">12-15</th>
	  <td><%= @male_12_to_15.size %></td>
	  <td><%= @female_12_to_15.size %></td>
	  <td>-</td>
	</tr>
      </tbody>
    </table>
  </div>
</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.0/Chart.bundle.min.js"></script> 
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.18.1/moment.min.js"></script> 

<script>
  jQuery(function($) {
  // Asynchronously Load the map API
  var script = document.createElement('script');
  script.src = "//maps.googleapis.com/maps/api/js?key=AIzaSyDD4P373_jEv_YBQ6dAM74ruHyXHgNrPn0&sensor=false&callback=initialize";
  document.body.appendChild(script);
  });
  
  function initialize() {
  var map;
  var bounds = new google.maps.LatLngBounds();
  var mapOptions = {
  mapTypeId: 'roadmap'
  };

  // Display a map on the page
  map = new google.maps.Map(document.getElementById("map_canvas"), mapOptions);
  map.setTilt(45);

  // Multiple Markers
  // markers code to paste [<%= @array %>]
  var markers = <%=raw @male_map %>;//[
  //['London Eye, London', 51.503454,-0.119562],
  //['Palace of Westminster, London', 51.499633,-0.124755]
  //];

  // Info Window Content
  var infoWindowContent = [
  ['<div class="info_content">' +
    '<h3>London Eye</h3>' +
    '<p>The London Eye is a giant Ferris wheel situated on the banks of the River Thames. The entire structure is 135 metres (443 ft) tall and the wheel has a diameter of 120 metres (394 ft).</p>' +        '</div>'],
  ['<div class="info_content">' +
    '<h3>Palace of Westminster</h3>' +
    '<p>The Palace of Westminster is the meeting place of the House of Commons and the House of Lords, the two houses of the Parliament of the United Kingdom. Commonly known as the Houses of Parliament after its tenants.</p>' +
    '</div>']
  ];

  // Display multiple markers on a map
  var infoWindow = new google.maps.InfoWindow(), marker, i;

  // Loop through our array of markers & place each one on the map
  for( i = 0; i < markers.length; i++ ) {
		  var position = new google.maps.LatLng(markers[i][1], markers[i][2]);
		  bounds.extend(position);
		  marker = new google.maps.Marker({
		  position: position,
		  map: map,
		  title: markers[i][0]
		  });

		  // Allow each marker to have an info window
		  google.maps.event.addListener(marker, 'click', (function(marker, i) {
		  return function() {
		  infoWindow.setContent(infoWindowContent[i][0]);
		  infoWindow.open(map, marker);
		  }
		  })(marker, i));

		  // Automatically center the map fitting all markers on the screen
		  map.fitBounds(bounds);
		  }

		  // Override our map zoom level once our fitBounds function runs (Make sure it only runs once)
		  var boundsListener = google.maps.event.addListener((map), 'bounds_changed', function(event) {
		  this.setZoom(14);
		  google.maps.event.removeListener(boundsListener);
		  });

		  }
		  
</script>

<script>
 function randomNumber(min, max) {
     return Math.random() * (max - min) + min;
 }
 var dateFormat = 'MMMM DD YYYY';
 
 
 function createBar(date, number_diagnosed) {     
     return {
	 t: moment_date.valueOf(),
	 y: number_diagnosed
     };
 }
 
 var data = <%=raw @male_chart %>;
 var male_chart = [];
 var female_chart = [];
 var data2 = <%=raw @female_chart %>;;
 var labels = [];
 for (var record in data ) {

   var moment_date = moment(data[record][0]);
   dateString = moment_date.format(dateFormat);
   date = moment(dateString, dateFormat)
   console.log("male date= "+date+"   *****   total="+data[record][1])

   if (date.isoWeekday() <= 5) {
      male_chart.push(createBar(date, data[record][1]));
      labels.push(date);
   }
 }

 for (var record in data2 ) {

   var moment_date = moment(data2[record][0]);
   dateString = moment_date.format(dateFormat);
   date = moment(dateString, dateFormat)
   console.log("female date= "+date+"   *****   total="+data2[record][1])

   if (date.isoWeekday() <= 5) {
      female_chart.push(createBar(date, data2[record][1]));
      labels.push(date);
   }
 }


 var ctx = document.getElementById('myChart').getContext('2d');
 ctx.canvas.width = 1000;
 ctx.canvas.height = 300;
 var chart = new Chart(ctx, {
 // The type of chart we want to create
 type: 'line',
     
 // The data for our dataset
     data: {
	 labels: labels,
	 datasets: [
	     {
		 label: "Male",
		 data: male_chart,
		 type: 'line',
		 pointRadius: 0,
		 fill: false,
		 lineTension: 0,
		 borderWidth: 2,
		 backgroundColor: "rgba(167,105,0,0.4)",
		 borderColor: "rgb(167, 105, 0)",
	     },
	     {
		 label: "Female",
		 data: female_chart,
		 type: 'line',
		 pointRadius: 0,
		 fill: false,
		 lineTension: 0,
		 borderWidth: 2,
		 backgroundColor: "rgba(225,0,0,0.4)",
		 borderColor: "rgb(230,230,250)",
	     }
	 ]
	 },
     // Configuration options go here
     options: {
	 scales: {
	     xAxes: [{
		 type: 'time',
		 distribution: 'series',
		 ticks: {
		     source: 'labels'
		     }
		 }],
	     yAxes: [{
		 scaleLabel: {
		     display: true,
		     labelString: 'Number Of Incidents'
		     }
		 }]
	     }
	 }
 });
</script>
